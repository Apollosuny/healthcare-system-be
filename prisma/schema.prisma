// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @default(autoincrement()) @id
  username      String    @unique
  password      String  
  lastLoginAt   DateTime?
  blocked       Boolean   @default(false)
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  client        Client?
  operator      Operator?
}

enum UserRole {
  CLIENT
  ADMIN
  OPERATOR
  SUPERADMIN
}

model Client {
  id              Int       @default(autoincrement()) @id
  firstName       String
  lastName        String
  email           String    @unique
  dob             DateTime
  gender          Gender
  avatar          String?
  phone           String
  address         String
  height          Float
  weight          Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  bloodSugars     BloodSugar[]
  bloodPressures  BloodPressure[]
  meals           Meal[]
  steps           Step[]
  prescriptions   Prescription[]
  userId          Int       @unique  
  user            User      @relation(fields: [userId], references: [id])
  clientHealthInformation ClientHealthInformation[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Operator {
  id            Int       @default(autoincrement()) @id
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  gender        Gender
  role          OperatorRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  healthInformations HealthInformation[]
}

enum OperatorRole {
  NURSE
  DOCTOR
  PHARMACIST
  LAB_TECHNICIAN
  ADMIN
}

model BloodSugar {
  id              Int       @default(autoincrement()) @id
  date            DateTime
  systolic        Float
  diastoic        Float
  pulse           Float
  description     String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  clientId        Int
  client          Client    @relation(fields: [clientId], references: [id])
}

model BloodPressure {
  id              Int       @default(autoincrement()) @id
  date            DateTime
  value           Float
  recordMoment    RecordMoment
  description     String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  clientId        Int
  client          Client    @relation(fields: [clientId], references: [id])
}

enum RecordMoment {
  BEFORE_MEAL
  AFTER_MEAL
  NON_MEAL
}

model Meal {
  id            Int       @default(autoincrement()) @id
  date          DateTime
  foodName      String
  foodImage     String?
  type          MealType
  description  String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  clientId      Int
  client        Client    @relation(fields: [clientId], references: [id])
}

enum MealType {
  MORNING
  AFTERNOON
  EVENING
  SNACK
}

model Step {
  id            Int       @default(autoincrement()) @id
  steps         Int
  distance      Float
  duration      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  clientId      Int
  client        Client    @relation(fields: [clientId], references: [id])
}

model Medication {
  id            Int       @default(autoincrement()) @id
  name          String
  dosage        String
  frequency     String
  sideEffects   String
  description   String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  prescriptions Prescription[]
}

model Prescription {
  id            Int       @default(autoincrement()) @id
  startDate     DateTime
  endDate       DateTime
  dosage        String
  frequency     String
  description   String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  clientId      Int
  client        Client    @relation(fields: [clientId], references: [id])
  medicationId  Int
  medication    Medication @relation(fields: [medicationId], references: [id])
}

model HealthInformation {
  id            Int      @default(autoincrement()) @id 
  title         String
  description   String   @db.Text
  metadata      Json?
  totalLiked    Int      @default(0)
  totalVisited  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  authorId      Int
  author        Operator @relation(fields: [authorId], references: [id])
  clientHealthInformations ClientHealthInformation[]
}

model ClientHealthInformation {
  id            Int       @default(autoincrement()) @id
  visitedAt     DateTime
  likeAt        DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  clientId      Int
  client        Client    @relation(fields: [clientId], references: [id])
  healthInformationId Int
  healthInformation   HealthInformation @relation(fields: [healthInformationId], references: [id])
}
